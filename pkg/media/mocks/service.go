// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	media "github.com/Footters/hex-footters/pkg/media"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateContent mocks base method
func (m *MockService) CreateContent(content *media.Content) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContent", content)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContent indicates an expected call of CreateContent
func (mr *MockServiceMockRecorder) CreateContent(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContent", reflect.TypeOf((*MockService)(nil).CreateContent), content)
}

// FindContentByID mocks base method
func (m *MockService) FindContentByID(id uint) (*media.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindContentByID", id)
	ret0, _ := ret[0].(*media.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindContentByID indicates an expected call of FindContentByID
func (mr *MockServiceMockRecorder) FindContentByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindContentByID", reflect.TypeOf((*MockService)(nil).FindContentByID), id)
}

// FindAllContents mocks base method
func (m *MockService) FindAllContents() ([]media.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllContents")
	ret0, _ := ret[0].([]media.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllContents indicates an expected call of FindAllContents
func (mr *MockServiceMockRecorder) FindAllContents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllContents", reflect.TypeOf((*MockService)(nil).FindAllContents))
}

// SetToLive mocks base method
func (m *MockService) SetToLive(content *media.Content) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetToLive", content)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetToLive indicates an expected call of SetToLive
func (mr *MockServiceMockRecorder) SetToLive(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToLive", reflect.TypeOf((*MockService)(nil).SetToLive), content)
}
