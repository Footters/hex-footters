// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	media "github.com/Footters/hex-footters/pkg/media"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockContentRepository is a mock of ContentRepository interface
type MockContentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContentRepositoryMockRecorder
}

// MockContentRepositoryMockRecorder is the mock recorder for MockContentRepository
type MockContentRepositoryMockRecorder struct {
	mock *MockContentRepository
}

// NewMockContentRepository creates a new mock instance
func NewMockContentRepository(ctrl *gomock.Controller) *MockContentRepository {
	mock := &MockContentRepository{ctrl: ctrl}
	mock.recorder = &MockContentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContentRepository) EXPECT() *MockContentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockContentRepository) Create(content *media.Content) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", content)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockContentRepositoryMockRecorder) Create(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContentRepository)(nil).Create), content)
}

// FindByID mocks base method
func (m *MockContentRepository) FindByID(id uint) (*media.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*media.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockContentRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockContentRepository)(nil).FindByID), id)
}

// FindAll mocks base method
func (m *MockContentRepository) FindAll() ([]media.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]media.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockContentRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockContentRepository)(nil).FindAll))
}

// Update mocks base method
func (m *MockContentRepository) Update(content *media.Content) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", content)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockContentRepositoryMockRecorder) Update(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockContentRepository)(nil).Update), content)
}

// MockProviderRepository is a mock of ProviderRepository interface
type MockProviderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProviderRepositoryMockRecorder
}

// MockProviderRepositoryMockRecorder is the mock recorder for MockProviderRepository
type MockProviderRepositoryMockRecorder struct {
	mock *MockProviderRepository
}

// NewMockProviderRepository creates a new mock instance
func NewMockProviderRepository(ctrl *gomock.Controller) *MockProviderRepository {
	mock := &MockProviderRepository{ctrl: ctrl}
	mock.recorder = &MockProviderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProviderRepository) EXPECT() *MockProviderRepositoryMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method
func (m *MockProviderRepository) CreateEvent() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateEvent")
}

// CreateEvent indicates an expected call of CreateEvent
func (mr *MockProviderRepositoryMockRecorder) CreateEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockProviderRepository)(nil).CreateEvent))
}

// GetLive mocks base method
func (m *MockProviderRepository) GetLive() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetLive")
}

// GetLive indicates an expected call of GetLive
func (mr *MockProviderRepositoryMockRecorder) GetLive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLive", reflect.TypeOf((*MockProviderRepository)(nil).GetLive))
}

// GetVOD mocks base method
func (m *MockProviderRepository) GetVOD() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetVOD")
}

// GetVOD indicates an expected call of GetVOD
func (mr *MockProviderRepositoryMockRecorder) GetVOD() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVOD", reflect.TypeOf((*MockProviderRepository)(nil).GetVOD))
}
